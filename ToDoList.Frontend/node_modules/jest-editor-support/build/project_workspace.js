"use strict";

require("core-js/modules/es.object.define-property.js");
require("core-js/modules/es.symbol.iterator.js");
require("core-js/modules/es.array.iterator.js");
require("core-js/modules/es.string.iterator.js");
require("core-js/modules/web.dom-collections.iterator.js");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.createProjectWorkspace = void 0;
require("core-js/modules/es.regexp.exec.js");
require("core-js/modules/es.string.replace.js");
require("core-js/modules/es.symbol.to-primitive.js");
require("core-js/modules/es.date.to-primitive.js");
require("core-js/modules/es.symbol.js");
require("core-js/modules/es.symbol.description.js");
require("core-js/modules/es.object.to-string.js");
require("core-js/modules/es.number.constructor.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
/**
 * a LoginShell holds the shell path and arguments to
 * start an login/interactive shell
 */
/**
 * Represents the project that the extension is running on and it's state
 */
var ProjectWorkspace = /*#__PURE__*/function () {
  function ProjectWorkspace(rootPath, jestCommandLine, pathToConfig, localJestMajorVersion, outputFileSuffix, collectCoverage, debug, nodeEnv, shell, useDashedArgs) {
    _classCallCheck(this, ProjectWorkspace);
    this.rootPath = rootPath;
    this.jestCommandLine = jestCommandLine;
    this.pathToConfig = pathToConfig;
    this.localJestMajorVersion = localJestMajorVersion;
    this.outputFileSuffix = outputFileSuffix ? outputFileSuffix.replace(/[^a-z0-9]/gi, '_').toLowerCase() : undefined;
    this.collectCoverage = collectCoverage;
    this.debug = debug;
    this.nodeEnv = nodeEnv;
    this.shell = shell;
    this.useDashedArgs = useDashedArgs;
  }
  _createClass(ProjectWorkspace, [{
    key: "pathToJest",
    get:
    /**
     * The path to the root of the project's workspace
     *
     * @type {string}
     */

    /**
     * The command to execute Jest on the command line, this is normally a file path like
     * `node_modules/.bin/jest` but you should not make the assumption that it is always a direct
     * file path, as in a create-react app it would look like `npm test --`.
     *
     * This means when launching a process, you will need to split on the first
     * space, and then move any other args into the args of the process.
     *
     * @type {string}
     */

    /**
     * @deprecated please use `jestCommandLine` instead.
     *
     * @type {string?}
     */
    function get() {
      // eslint-disable-next-line no-console
      console.warn('Use of ProjectWorkspace.pathToJest is deprecated.  Please use jestCommandLine instead.');
      return this.jestCommandLine;
    },
    set: function set(commandLine) {
      // eslint-disable-next-line no-console
      console.warn('Use of ProjectWorkspace.pathToJest is deprecated.  Please use jestCommandLine instead.');
      this.jestCommandLine = commandLine;
    }

    /**
     * Path to a local Jest config file.
     *
     * @type {string}
     */
  }]);
  return ProjectWorkspace;
}();
/**
 * A factory to create a ProjectWorkspace instance from a ProjectWorkspaceConfig object.
 */
exports["default"] = ProjectWorkspace;
var createProjectWorkspace = function createProjectWorkspace(config) {
  // Note for pathToConfig we are forcing the TS compiler to accept undefined for ProjectWorkspace.pathToConfig.
  // This property should be allowed to be optional, since Jest will work fine if no config file is provided.  It
  // will just use defaults.
  return new ProjectWorkspace(config.rootPath, config.jestCommandLine, config.pathToConfig, config.localJestMajorVersion, config.outputFileSuffix, config.collectCoverage, config.debug, config.nodeEnv, config.shell, config.useDashedArgs);
};
exports.createProjectWorkspace = createProjectWorkspace;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,